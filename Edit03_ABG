# Question 2 codes from here

# 25th drought
# 640 acres of land will be all used
# Define the LP Problem and add constraints
prob2 = LpProblem(name='25th_Rainfall', sense=LpMaximize)
#prob2 += (0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13) + (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob2 += (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob2 += (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32) <= (18 + rain25)

prob2 += alpha21 + alpha22 <=1
prob2 += alpha31 + alpha32 <=1

prob2 += x21 - 22*alpha21 <= 0
prob2 += x22 - 13*alpha22 <= 0
prob2 += x31 - 20*alpha31 <= 0
prob2 += x32 - 15*alpha32 <= 0

# The problem data is written to an .lp file
prob2.writeLP("MiniProj3_25th.lp")

# The problem is solved using PuLP's default Solver
prob2.solve()
# prob.solve(solver=GLPK(msg=False))

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob2.status])

# Each of the variables is printed with its optimum value
for v in prob2.variables():
    print(v.name, "=", v.varValue)
    
# 75th wet
# 640 acres of land will be all used
# Define the LP Problem and add constraints
prob2 = LpProblem(name='75th_Rainfall', sense=LpMaximize)
#prob2 += (0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13) + (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob2 += (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22)*COa.varValue + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)*SORa.varValue# Objective function
prob2 += (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32) <= (18 + rain75)

prob2 += alpha21 + alpha22 <=1
prob2 += alpha31 + alpha32 <=1

prob2 += x21 - 22*alpha21 <= 0
prob2 += x22 - 13*alpha22 <= 0
prob2 += x31 - 20*alpha31 <= 0
prob2 += x32 - 15*alpha32 <= 0

# The problem data is written to an .lp file
prob2.writeLP("MiniProj3_25th.lp")

# The problem is solved using PuLP's default Solver
prob2.solve()
# prob.solve(solver=GLPK(msg=False))

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob2.status])

# Each of the variables is printed with its optimum value
for v in prob2.variables():
    print(v.name, "=", v.varValue)    
